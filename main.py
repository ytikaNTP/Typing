from flask import Flask, request, jsonify, send_from_directory
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
from datetime import datetime
from PIL import Image
import os
import logging
import asyncio
import threading
import io
import nest_asyncio
from hypercorn.asyncio import serve
from hypercorn.config import Config

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
# pip install "flask[async]" python-telegram-bot==20.3 pillow hypercorn nest_asyncio

app = Flask(__name__, static_folder='static')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '7857812613:AAGXRbkr5TiJC5z7IxxoPCzw07ZvDNeHjVg'
ADMIN_CHAT_IDS = [6966335427, 7847234018]  # –£–∫–∞–∑–∞–Ω–Ω—ã–µ Chat ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
message_tags = {}
message_data = {}

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@app.route('/static/<path:path>')
def send_static(path):
    return send_from_directory('static', path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def compress_image(file):
    try:
        img = Image.open(file.stream)
        img = img.convert("RGB")
        
        # –°–∂–∞—Ç–∏–µ –¥–æ 90% –∫–∞—á–µ—Å—Ç–≤–∞
        output = io.BytesIO()
        img.save(output, format='JPEG', quality=90)
        output.seek(0)
        return output
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
async def async_send_to_telegram(data, files):
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        async with application:
            bot = application.bot
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

            # –°–∂–∏–º–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            compressed_images = []
            for file in files:
                if file and allowed_file(file.filename):
                    compressed_img = compress_image(file)
                    if compressed_img:
                        compressed_images.append(compressed_img)
            logger.info(f"–°–∂–∞—Ç–æ {len(compressed_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
            message_text = f"""
            === –ù–û–í–´–ô –¢–ò–ö–ï–¢ –û–¢ {data['name']} ===

            üìÖ –î–∞—Ç–∞: {current_date}

            üë§ –ò–º—è: {data['name']}

            üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}

            üìß –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}

            üîó –°—Å—ã–ª–∫–∞: {data['product_url']}

            üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: 
            {data.get('comment', '...')}

            ______________________________________________
                „Ö§
            """

            messages_ids = []
            for chat_id in ADMIN_CHAT_IDS:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}.")
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = await bot.send_message(
                    chat_id=chat_id,
                    text=message_text.strip(),
                    parse_mode='HTML'
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
                message_id = str(message.message_id)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                media_messages = []
                if compressed_images:
                    media = [InputMediaPhoto(img.getvalue()) for img in compressed_images]
                    media_messages = await bot.send_media_group(
                        chat_id=chat_id, 
                        media=media
                    )
                    logger.info(f"–ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                message_data[message_id] = {
                    'media_ids': [m.message_id for m in media_messages],
                    'file_ids': [img.getvalue() for img in compressed_images],
                    'chat_id': chat_id
                }
                messages_ids.append(message_id)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–≥–∞–º–∏
                await bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_tags_keyboard(message_id)
                )
                logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}.")

            return messages_ids
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–µ–≥–∞–º–∏
def get_tags_keyboard(message_id):
    tags = ['ü§°–∫–ª–æ—É–Ω', 'üí£—Å–ø–∞–º', '‚ùå–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', '‚úîÔ∏è–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '‚ùì–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º']
    keyboard = []
    for tag in tags:
        callback_data = f"tag_{message_id}_{tag}"
        keyboard.append([InlineKeyboardButton(tag, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{message_id}")])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–≥–æ–≤
async def handle_tag_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data.split('_')
        if len(data) != 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
            
        message_id = data[1]
        tag = data[2]

        current_tags = message_tags.get(message_id, [])
        
        if tag in current_tags:
            current_tags.remove(tag)
        else:
            current_tags.append(tag)
        
        message_tags[message_id] = current_tags
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        tags_text = '\n'.join(current_tags) if current_tags else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'
        message_text = query.message.text.split('\nüè∑')[0] + f"\nüè∑ –¢—ç–≥–∏:\n{tags_text}"
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=get_tags_keyboard(message_id),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–∞: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        message_id = query.data.split('_')[1]
        
        if message_id in message_data:
            application = Application.builder().token(TELEGRAM_TOKEN).build()
            async with application:
                bot = application.bot
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
                for media_id in message_data[message_id]['media_ids']:
                    await bot.delete_message(
                        chat_id=message_data[message_id]['chat_id'],
                        message_id=media_id
                    )
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.delete_message(
                    chat_id=message_data[message_id]['chat_id'],
                    message_id=int(message_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º message_id –≤ int
                )
                
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                del message_data[message_id]
                if message_id in message_tags:
                    del message_tags[message_id]
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
@app.route('/save', methods=['POST'])
def save_handler():
    try:
        data = request.form
        files = request.files.getlist('images')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        result = asyncio.run(async_send_to_telegram(data, files))
        
        if result:
            return jsonify({'success': True, 'message_ids': result})
        else:
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'}), 500
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg'}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_error_handler(error_handler)
    application.add_handler(CallbackQueryHandler(handle_tag_callback, pattern="^tag_"))
    application.add_handler(CallbackQueryHandler(handle_delete_callback, pattern="^delete_"))
    
    await application.run_polling()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    if not os.path.exists('static'):
        os.makedirs('static')

    # –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    nest_asyncio.apply()

    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_task = loop.create_task(run_bot())

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Hypercorn –¥–ª—è Flask
    config = Config()
    config.bind = ["0.0.0.0:3000"]

    try:
        # –ó–∞–ø—É—Å–∫ Flask —á–µ—Ä–µ–∑ Hypercorn
        loop.run_until_complete(serve(app, config))
    except KeyboardInterrupt:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        bot_task.cancel()
        loop.close()
