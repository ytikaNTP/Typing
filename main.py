from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
from datetime import datetime
from PIL import Image
import os
import logging
import asyncio
import io

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__, static_folder='static')
CORS(app)  # –í–∫–ª—é—á–∞–µ–º CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '7857812613:AAGXRbkr5TiJC5z7IxxoPCzw07ZvDNeHjVg'
ADMIN_CHAT_IDS = [6966335427, 7847234018]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
message_tags = {}
message_data = {}

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@app.route('/static/<path:path>')
def send_static(path):
    return send_from_directory('static', path)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request
def log_request():
    logger.info(f"\n=== –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å ===")
    logger.info(f"Method: {request.method}")
    logger.info(f"URL: {request.url}")
    logger.info(f"Headers: {dict(request.headers)}")
    logger.info(f"Form data: {request.form}")
    logger.info(f"Files: {list(request.files.keys())}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def compress_image(file):
    try:
        img = Image.open(file.stream)
        if img.mode != 'RGB':
            img = img.convert("RGB")
        output = io.BytesIO()
        img.save(output, format='JPEG', quality=90)
        output.seek(0)
        return output
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async def async_send_to_telegram(data, files):
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        bot = application.bot
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        compressed_images = []
        for file in files:
            if file and allowed_file(file.filename):
                if compressed := compress_image(file):
                    compressed_images.append(compressed)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"""
        === –ù–û–í–´–ô –¢–ò–ö–ï–¢ –û–¢ {data['name']} ===

üìÖ –î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y %H:%M")}
üë§ –ò–º—è: {data['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üìß –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}
üîó –°—Å—ã–ª–∫–∞: {data['product_url']}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: 
{data.get('comment', '...')}
        """.strip()

        messages_ids = []
        for chat_id in ADMIN_CHAT_IDS:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                message = await bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode='HTML'
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
                media_messages = []
                if compressed_images:
                    media = [InputMediaPhoto(img) for img in compressed_images]
                    media_messages = await bot.send_media_group(
                        chat_id=chat_id,
                        media=media
                    )

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                message_data[str(message.message_id)] = {
                    'media_ids': [m.message_id for m in media_messages],
                    'chat_id': chat_id
                }

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                await bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_tags_keyboard(message.message_id)
                )

                messages_ids.append(message.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")

        return messages_ids
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_tags_keyboard(message_id):
    tags = ['ü§°–∫–ª–æ—É–Ω', 'üí£—Å–ø–∞–º', '‚ùå–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', '‚úîÔ∏è–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '‚ùì–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º']
    buttons = [InlineKeyboardButton(tag, callback_data=f"tag_{message_id}_{tag}") for tag in tags]
    return InlineKeyboardMarkup([
        buttons[i:i+2] for i in range(0, len(buttons), 2)
        + [[InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{message_id}")]]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def handle_tag_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        _, message_id, tag = query.data.split('_')
        current_tags = message_tags.get(message_id, [])
        
        if tag in current_tags:
            current_tags.remove(tag)
        else:
            current_tags.append(tag)
        
        message_tags[message_id] = current_tags
        tags_text = '\n'.join(current_tags) if current_tags else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'
        
        await query.edit_message_text(
            text=query.message.text.split('\nüè∑')[0] + f"\nüè∑ –¢—ç–≥–∏:\n{tags_text}",
            reply_markup=get_tags_keyboard(message_id),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–≥–∞: {e}")

async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        message_id = query.data.split('_')[1]
        if message_id in message_data:
            async with Application.builder().token(TELEGRAM_TOKEN).build() as app:
                bot = app.bot
                data = message_data[message_id]
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
                for media_id in data['media_ids']:
                    await bot.delete_message(
                        chat_id=data['chat_id'],
                        message_id=media_id
                    )
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.delete_message(
                    chat_id=data['chat_id'],
                    message_id=int(message_id)
                )
                
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                del message_data[message_id]
                if message_id in message_tags:
                    del message_tags[message_id]
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
@app.route('/save', methods=['POST'])
async def save_handler():
    try:
        form_data = request.form
        files = request.files.getlist('images')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required = ['name', 'phone', 'contact', 'product_url']
        if not all(form_data.get(field) for field in required):
            return jsonify({'success': False, 'error': 'Missing required fields'}), 400
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        result = await async_send_to_telegram(form_data, files)
        
        return jsonify({
            'success': bool(result),
            'message_ids': result or [],
            'error': 'Failed to send' if not result else None
        }), 200 if result else 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg'}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CallbackQueryHandler(handle_tag_callback, pattern="^tag_"))
    application.add_handler(CallbackQueryHandler(handle_delete_callback, pattern="^delete_"))
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        await asyncio.sleep(3600)

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def run_web():
    config = Config()
    config.bind = ["0.0.0.0:3000"]
    await serve(app, config)
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await asyncio.gather(
        run_web(),
        run_bot()
    )

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
    if not os.path.exists('static'):
        os.makedirs('static')

    # –ó–∞–ø—É—Å–∫
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
